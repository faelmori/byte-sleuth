name: Unified Release (PyPI, VSCode, GitHub)

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:

jobs:
  release-all:
    if: github.actor == 'faelmori'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Extract version from tag
        id: extract_version
        run: |
          TAG=${GITHUB_REF_NAME#v}
          echo "version=$TAG" >> $GITHUB_OUTPUT

      # Substitui __VERSION__ nos arquivos
      - name: Replace __VERSION__ in package.json
        run: |
          sed -i "s/\"__VERSION__\"/\"${{ steps.extract_version.outputs.version }}\"/g" vscode-extension/package.json
      - name: Replace __VERSION__ in pyproject.toml
        run: |
          sed -i "s/^version = \".*\"/version = \"${{ steps.extract_version.outputs.version }}\"/g" pyproject.toml
      - name: Replace __VERSION__ in __init__.py
        run: |
          sed -i "s/__version__ = \".*\"/__version__ = \"${{ steps.extract_version.outputs.version }}\"/g" byte_sleuth/__init__.py

      # Build e publish PyPI
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
      - name: Install build dependencies
        run: |
          python -m pip install --upgrade pip
          pip install build
      - name: Build package
        run: |
          python -m build
      - name: Run tests (opcional, adicione se houver)
        run: |
          if [ -f pyproject.toml ]; then
            pip install .[test] || pip install .
            pytest || echo 'No tests defined.'
          fi
      - name: Upload dist artifact
        uses: actions/upload-artifact@v4
        with:
          name: python-dist
          path: dist/*
      - name: Publish to PyPI
        if: ${{ success() }}
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          password: ${{ secrets.PYPI_API_TOKEN }}

      # Build e publish VSCode
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
        # working-directory: vscode-extension
      - name: Install dependencies (VSCode)
        run: npm ci
        working-directory: vscode-extension
      - name: Install vsce
        run: npm install -g @vscode/vsce
        working-directory: vscode-extension
      - name: Run tests (VSCode, opcional)
        run: |
          if [ -f package.json ]; then
            npm test || echo 'No tests defined.'
          fi
        working-directory: vscode-extension
      - name: Build VSIX package
        run: vsce package --no-yarn
        working-directory: vscode-extension
      - name: Upload VSIX artifact
        uses: actions/upload-artifact@v4
        with:
          name: vscode-extension-vsix
          path: vscode-extension/*.vsix
      - name: Publish to VSCode Marketplace
        if: ${{ success() }}
        env:
          VSCE_TOKEN: ${{ secrets.VSCE_TOKEN }}
        run: |
          vsce publish --pat $VSCE_TOKEN --no-yarn
        working-directory: vscode-extension

      # Changelog e release GitHub
      - name: Download python dist
        uses: actions/download-artifact@v4
        with:
          name: python-dist
          path: dist/
      - name: Download VSIX
        uses: actions/download-artifact@v4
        with:
          name: vscode-extension-vsix
          path: vsix/
      - name: Generate changelog
        id: changelog
        uses: mikepenz/release-changelog-builder-action@v4
        with:
          configuration: ""
        env:
          GITHUB_TOKEN: ${{ secrets.GH_PAT }}
      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ github.ref_name }}
          name: Release ${{ github.ref_name }}
          body: ${{ steps.changelog.outputs.changelog }}
          files: |
            dist/*
            vsix/*.vsix
        env:
          GITHUB_TOKEN: ${{ secrets.GH_PAT }}

      - name: Rollback (manual intervention required)
        if: failure()
        run: |
          echo "Release failed. Please check PyPI, VSCode Marketplace, and GitHub for partial releases."
          echo "Manual cleanup may be required (ex: delete tag/release, unpublish extension, etc)."
